#ifndef RUFALU_TESTS_POLYA_HPP
#define RUFALU_TESTS_POLYA_HPP

#include <string>

#include "polyATail.h"

TEST(PolyATests, TruePolyA){
  std::string contig = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATCAGGAGGCACAAAATATCGGTGCATCTCATTGTTGTGATGCCAAGTTTGATCACTTAAGGCAATATTGACTAGATTTCTCCATCATAA";
  std::pair<bool, int> check = polyA::detectPolyATail(contig);
  ASSERT_TRUE(check.first);

}

TEST(PolyATests, FalsePolyA){
  std::string contig = "AAAAAAACAAAAAAAAAAACAAAAAAAAACAAAAAAAAAACAAAAAAAAAAACAAAAAAAACAAAAAATCAGGAGGCACAAAATATCGGTGCATCTCATTGTTGTGATGCCAAGTTTGATCACTTAAGGCAATATTGACTAGATTTCTCCATCATAA";
  std::pair<bool, int> check = polyA::detectPolyATail(contig);

  ASSERT_FALSE(check.first);
}

TEST(PolyATests, TruePolyT){
  std::string contig = "AGATGCACCGATATTTTGTGCCTCCTGATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTGGTTTTTTTTTTTTTTTTTTTTTTGTTGTTTGTTTTTTTTTTTGTTTGTTTTCTT";
  std::pair<bool, int> check = polyA::detectPolyTTail(contig);
  ASSERT_TRUE(check.first);

}

TEST(PolyATests, FalsePolyT){
  std::string contig = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATCAGGAGGCACAAAATATCGGTGCATCTCATTGTTGTGATGCCAAGTTTGATCACTTAAGGCAATATTGACTAGATTTCTCCATCATAA";
  std::pair<bool, int> check = polyA::detectPolyTTail(contig);
  ASSERT_FALSE(check.first);
}

#endif //RUFALU_TESTS_POLYA_HPP
